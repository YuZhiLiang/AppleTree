package com.sy.appletree.myclasses;


import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.BitmapDrawable;
import android.os.Handler;
import android.text.TextUtils;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.sy.appletree.R;
import com.sy.appletree.base.BaseActivity;

import java.util.ArrayList;
import java.util.List;

public class XZAndXQClassActivity extends BaseActivity {

    private int mIntExtra;
    private PullToRefreshListView mListView;
    private Button mButton;
    private ClassesChooseAdapter mClassesChooseAdapter;
    private int ClickPosition=-1;
    private List<String> mListClass=new ArrayList<>();

    //spinner的数据
    private List<String> mList1=new ArrayList<>();
    private List<String> mList2=new ArrayList<>();
    private List<String> mList3=new ArrayList<>();

    private mySpinnerAdapter1 mMySpinnerAdapter1;
    private mySpinnerAdapter2 mMySpinnerAdapter2;
    private mySpinnerAdapter3 mMySpinnerAdapter3;
    private Handler mHandler=new Handler();

    private boolean isJop=false;//是否跳转
    @Override
    protected void findViews() {
        Intent intent = getIntent();
        mIntExtra = intent.getIntExtra("tag",0);
        //设置标题
        if (mIntExtra==1){//行政班
            setTitleText("行政班", true);
        }else {//兴趣班
            setTitleText("兴趣班", true);
        }
        //设置右侧添加可见
        setOnRightVillable(true);
        //设置右侧图标不可见
        setBaseRightIcon(1, false);
        //设置搜索可见
        setSeacherVillable(true);

        mListView= (PullToRefreshListView) findViewById(R.id.classes_list);
        mButton= (Button) findViewById(R.id.classes_btn);

        for (int i = 0; i < 6; i++) {
            mListClass.add("小学一年级"+"("+i+")"+"班");
            mList3.add(i+"班");
        }
       mList1.add("小学");
       mList1.add("初中");
       mList1.add("高中");
        for (int i = 0; i < 3; i++) {
            mList2.add(i+"年级");
        }
        mClassesChooseAdapter=new ClassesChooseAdapter(this,mListClass);
        mListView.setAdapter(mClassesChooseAdapter);

        //搜索事件
        setClassesSearchListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });

        //右侧添加点击事件
        setBaseRightClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //popwindow
                if (mIntExtra==1){//行政班
                    initPopWindow("0");
                }else {//兴趣班
                    initPopWindow("1");
                }
                openPopWindow();

            }
        });

        //加入事件
        mButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //点了加入
            }
        });
    }

    public void openPopWindow() {
        //底部显示
        popupWindow.showAtLocation(contentView, Gravity.BOTTOM, 0, 0);
    }
    private View contentView;
    private PopupWindow popupWindow;
    String school;
    String grade;
    String classes;
    private void initPopWindow(String tag) {
        screenDimmed();//暗屏

        //加载弹出框的布局
        contentView = LayoutInflater.from(this).inflate(
                R.layout.pop_layout, null);
        //设置弹出框的宽度和高度
        popupWindow = new PopupWindow(contentView,
                ViewGroup.LayoutParams.WRAP_CONTENT,
                ViewGroup.LayoutParams.WRAP_CONTENT);
        popupWindow.setFocusable(true);// 取得焦点
        //注意  要是点击外部空白处弹框消息  那么必须给弹框设置一个背景色  不然是不起作用的
        popupWindow.setBackgroundDrawable(new BitmapDrawable());
        //点击外部消失
        popupWindow.setOutsideTouchable(true);
        //设置可以点击
        popupWindow.setTouchable(true);
        //进入退出的动画
        popupWindow.setAnimationStyle(R.style.mypopwindow_anim_style);
        TextView title= (TextView) contentView.findViewById(R.id.xinjianbanji);
        TextView tishi= (TextView) contentView.findViewById(R.id.yicunzai);
        Spinner spinner1= (Spinner) contentView.findViewById(R.id.spinner1);
        Spinner spinner2= (Spinner) contentView.findViewById(R.id.spinner2);
        Spinner spinner3= (Spinner) contentView.findViewById(R.id.spinner3);
        final Button button= (Button) contentView.findViewById(R.id.pop_chuangjian);
        ImageView close= (ImageView) contentView.findViewById(R.id.close);

        final LinearLayout layout_success= (LinearLayout) contentView.findViewById(R.id.pop_success);
        final LinearLayout layout_add= (LinearLayout) contentView.findViewById(R.id.pop_success_add);
        if (tag.equals("0")){
            title.setText("新建班级");
        }else if (tag.equals("1")){
            title.setText("新建兴趣班");
        }
        mMySpinnerAdapter1=new mySpinnerAdapter1(mList1,XZAndXQClassActivity.this);
        spinner1.setAdapter(mMySpinnerAdapter1);
        mMySpinnerAdapter2=new mySpinnerAdapter2(mList2,XZAndXQClassActivity.this);
        spinner2.setAdapter(mMySpinnerAdapter2);
        mMySpinnerAdapter3=new mySpinnerAdapter3(mList3,XZAndXQClassActivity.this);
        spinner3.setAdapter(mMySpinnerAdapter3);

        spinner1.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                String s = (String) parent.getItemAtPosition(position);
                school = s;
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
        spinner2.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                String s = (String) parent.getItemAtPosition(position);
                grade=s;
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
        spinner3.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                String s = (String) parent.getItemAtPosition(position);
                classes = s;
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (TextUtils.isEmpty(school)) {
                    Toast.makeText(XZAndXQClassActivity.this, "请选择教育阶段", Toast.LENGTH_SHORT).show();
                    return;
                } else if (TextUtils.isEmpty(grade)) {
                    Toast.makeText(XZAndXQClassActivity.this, "请选择年级", Toast.LENGTH_SHORT).show();
                    return;
                } else if (TextUtils.isEmpty(classes)) {
                    Toast.makeText(XZAndXQClassActivity.this, "请选择班级", Toast.LENGTH_SHORT).show();
                    return;
                } else {
                    //请求接口
                    if (button.getText().toString().equals("创建")){
                        ChuangJian(layout_success);
                    }else {
                        ChuangJian(layout_add);
                    }

                }
            }
        });

        close.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (popupWindow != null && popupWindow.isShowing()) {
                    popupWindow.dismiss();
                    popupWindow = null;
                }
            }
        });

        popupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() {
            @Override
            public void onDismiss() {

                //亮屏
                screenBrighter();
                if (isJop){
                    isJop=false;
                    Intent intent=new Intent(XZAndXQClassActivity.this,ClassManegerActivity.class);
                    startActivity(intent);
                }
            }
        });

    }

    /**
     * 创建或加入班级
     */
    private void ChuangJian(LinearLayout layout) {
        layout.setVisibility(View.VISIBLE);
        isJop=true;
        mHandler.postDelayed(new Runnable() {
            @Override
            public void run() {
                if (popupWindow != null && popupWindow.isShowing()) {
                    popupWindow.dismiss();
                    popupWindow = null;
                }
            }
        },1000);
    }


    private void screenBrighter() {
        WindowManager.LayoutParams params = XZAndXQClassActivity.this.getWindow().getAttributes();
        params.alpha = 1f;
        XZAndXQClassActivity.this.getWindow().setAttributes(params);
    }

    private void screenDimmed() {
        WindowManager.LayoutParams params = XZAndXQClassActivity.this.getWindow().getAttributes();
        params.alpha = 0.7f;
        XZAndXQClassActivity.this.getWindow().setAttributes(params);
    }


    @Override
    protected void getData() {

    }

    @Override
    protected void setListener() {

    }

    @Override
    protected int setContentView() {
        return R.layout.activity_xing_zheng_class;
    }

    /**
     * 班级列表适配器
     */
    public class ClassesChooseAdapter extends BaseAdapter {
        private Context mContext;
        private List<String> mList;

        public ClassesChooseAdapter(Context context, List<String> list) {
            mContext = context;
            mList = list;
        }

        @Override
        public int getCount() {
            return mList.size();
        }

        @Override
        public Object getItem(int position) {
            return mList.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(final int position, View convertView, ViewGroup parent) {
            ViewHolder viewHolder;
            if (convertView==null){
                viewHolder=new ViewHolder();
                convertView= LayoutInflater.from(mContext).inflate(R.layout.place_item,null);
                viewHolder.mCheckBox= (RadioButton) convertView.findViewById(R.id.place_check);
                viewHolder.mRadioGroup= (RadioGroup) convertView.findViewById(R.id.place_radio);
                convertView.setTag(viewHolder);
            }else {
                viewHolder= (ViewHolder) convertView.getTag();
            }
            if (mList.size()!=0){
                viewHolder.mCheckBox.setText(mList.get(position));
                viewHolder.mRadioGroup.clearCheck();
            }
            if (ClickPosition==position){//条目为刚才点击的条目

                viewHolder.mCheckBox.setChecked(true);
            }else {
                viewHolder.mCheckBox.setChecked(false);
            }
            viewHolder.mCheckBox.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    ClickPosition=position;
                    notifyDataSetChanged();
                    Log.e("刷新执行了", position + "");
                }
            });


            return convertView;
        }

        class ViewHolder{
            RadioButton mCheckBox;
            RadioGroup mRadioGroup;
        }
    }
    /**
     * 弹窗spinner适配器(1)
     */
    public class mySpinnerAdapter1 extends BaseAdapter{

        private List<String> mList;
        private Context mContext;

        public mySpinnerAdapter1(List<String> list, Context context) {
            mList = list;
            mContext = context;
        }

        @Override
        public int getCount() {
            return mList.size();
        }

        @Override
        public Object getItem(int position) {
            return mList.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {

            ViewHolder holder;
            if (convertView==null){
                holder=new ViewHolder();
                convertView=getLayoutInflater().inflate(R.layout.spinner_item, null);
                holder.mTextView= (TextView)convertView.findViewById(R.id.spinner_txt);
                convertView.setTag(holder);
            }else {
                holder= (ViewHolder) convertView.getTag();
            }

            holder.mTextView.setText(mList.get(position));

            return convertView;
        }

        class ViewHolder{
            TextView mTextView;
        }
    }

    /**
     * 弹窗spinner适配器(2)
     */
    public class mySpinnerAdapter2 extends BaseAdapter{

        private List<String> mList;
        private Context mContext;

        public mySpinnerAdapter2(List<String> list, Context context) {
            mList = list;
            mContext = context;
        }

        @Override
        public int getCount() {
            return mList.size();
        }

        @Override
        public Object getItem(int position) {
            return mList.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {

            ViewHolder holder;
            if (convertView==null){
                holder=new ViewHolder();
                convertView=getLayoutInflater().inflate(R.layout.spinner_item,null);
                holder.mTextView= (TextView)convertView.findViewById(R.id.spinner_txt);
                convertView.setTag(holder);
            }else {
                holder= (ViewHolder) convertView.getTag();
            }

            holder.mTextView.setText(mList.get(position));

            return convertView;
        }

        class ViewHolder{
            TextView mTextView;
        }
    }
    /**
     * 弹窗spinner适配器(3)
     */
    public class mySpinnerAdapter3 extends BaseAdapter{

        private List<String> mList;
        private Context mContext;

        public mySpinnerAdapter3(List<String> list, Context context) {
            mList = list;
            mContext = context;
        }

        @Override
        public int getCount() {
            return mList.size();
        }

        @Override
        public Object getItem(int position) {
            return mList.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {

            ViewHolder holder;
            if (convertView==null){
                holder=new ViewHolder();
                convertView=getLayoutInflater().inflate(R.layout.spinner_item,null);
                holder.mTextView= (TextView)convertView.findViewById(R.id.spinner_txt);
                convertView.setTag(holder);
            }else {
                holder= (ViewHolder) convertView.getTag();
            }

            holder.mTextView.setText(mList.get(position));

            return convertView;
        }

        class ViewHolder{
            TextView mTextView;
        }
    }

    @Override
    protected void onDestroy() {
        if (mHandler!=null){
            mHandler=null;
        }
        super.onDestroy();
    }
}
